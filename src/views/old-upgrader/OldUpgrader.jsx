import { onMount, onCleanup, createSignal, For, createEffect } from "solid-js";

import Coin from "../../utilities/Coin";
import Bg from "../../assets/img/upgrader/upgrader_bg.png";
import YellowButtonBg from "../../assets/img/animatedButtonBg.jpg";
import injector from "../../injector/injector";

import Dome from "../../assets/img/upgrader/dome.png";
import Oil from "../../assets/img/upgrader/oil.png";
import Elements from "../../assets/img/upgrader/elements.png";
import Sign from "../../assets/img/upgrader/sign1.png";
import GrayBg from "../../assets/img/upgrader/greybgcard_compressed.png";
import BrownBg from "../../assets/img/upgrader/brownbgcard_compressed.jpg";
import GrayButtonBg from "../../assets/img/animatedGrayButtonBg.jpg";
import ChartJS from "./Chart";
import FailedCardBg from "../../assets/img/upgrader/failedCardBg.svg";
import WinCardBg from "../../assets/img/upgrader/winCardBg.svg";
import CardItem from "../../components/CardItem";
import { useI18n } from "../../i18n/context";
import UpgraderSnow from "../../components/elements/UpgraderSnow";
import {
  playDeselectItemSound,
  playSelectItemSound,
} from "../../utilities/Sounds/ItemsSound";
import { playOptionClickSound } from "../../utilities/Sounds/SoundButtonClick";
import PageLoader from "../../components/PageLoader";
import Fallback from "../Fallback";
import PageLoadState from "../../libraries/PageLoadState";


const OldUpgrader = ({ loaded }) => {
  const i18n = useI18n();

  const { socket, toastr, userObject, SNOWMODE } = injector;
  let upgraderAnimation;

  let spinner;

  const [betValue, setBetValue] = createSignal("");

  const [isPageLoaded, setIsPageLoaded] = createSignal(false)

  const [items, setItems] = createSignal([]);
  const [globalHistory, setGlobalHistory] = createSignal([]);
  const [isGameStarted, setIsGameStarted] = createSignal(false);

  const [activeItem, setActiveItem] = createSignal({});

  const [over, setOver] = createSignal(true);
  const [fastSpinner, setFastSpinner] = createSignal(false);
  const [isItemsLoaded, setIsItemsLoaded] = createSignal(false)

  const [search, setSearch] = createSignal("");
  const [descending, setDescending] = createSignal(false);
  const [currentGameId, setCurrentGameId] = createSignal("");
  const [currentGameRoll, setCurrentGameRoll] = createSignal("");
  const [itemsLimit, setItemsLimit] = createSignal(48);
  const [betPeack, setBetPeack] = createSignal();
  const { upgraderPageLoaded, onUpgraderPageLoad } = PageLoadState;

  let pageWrapper;

  let typingTimer;

  const checkImageLoaded = () => {
    const updateStatus = (images) => {
        setIsItemsLoaded(
          images.map((image) => image.complete).every((item) => item === true)
        );
      };

      const imagesLoaded = Array.from(pageWrapper.querySelectorAll("img"));

      if (imagesLoaded.length === 0) {
        setIsItemsLoaded(true);
        return;
      }
      imagesLoaded.forEach((image) => {
        image.addEventListener("load", () => updateStatus(imagesLoaded), {
          once: true
        });
        image.addEventListener("error", () => updateStatus(imagesLoaded), {
          once: true
        });
      });
  }

  const sendSearchReq = (value) => {
    setSearch(value);
    updateItems(false);
  };

  let observer;

  // const equals = (a, b) => a.length === b.length && a.every((v, i) => v === b[i]);

  const bet = () => {
    if (betValue() >= -1) {
      setIsGameStarted(true);
      socket.emit(
        "upgrader:bet",
        {
          bet: betValue(),
          item: activeItem(),
          type: over() ? "over" : "under",
          fastSpinner:
            window.innerWidth < 551
              ? true
              : window.innerWidth > 1299 && window.innerWidth < 1537
              ? true
              : fastSpinner(),
        },
        (data) => {
          if (data.msg) {
            toastr(data);
          }
          if (data.hash) {
            setCurrentGameId(data.hash);
          }
          if (data.roll) {
            setCurrentGameRoll(data.roll);
          }
        }
      );
    } else {
      setCurrentGameId("");
      setCurrentGameRoll("");
      toastr({
        msg: "Minimum bet is 50 coins",
        error: true,
      });
    }
  };

  const [spinning, setSpinning] = createSignal(false);

  const spin = (ticket, time) => {
    if (spinning()) return;

    setSpinning(true);
    const isSpinFast =
      window.innerWidth < 551
        ? true
        : window.innerWidth > 1299 && window.innerWidth < 1537
        ? true
        : fastSpinner();
    setTimeout(
      () => {
        setTimeout(() => {
          if (spinner && spinner.style) {
            spinner.style.transform = `rotate(${+360 * 4 + 360 * ticket}deg)`;
            spinner.style.transitionTimingFunction = `cubic-bezier(0.12, 0.8, 0.38, 1)`;
            spinner.style.transitionDuration = `${time / 1000}s`;

            setTimeout(() => {
              setSpinning(false);

              spinner.style.transform = `rotate(${0}deg)`;
              spinner.style.transitionTimingFunction = `cubic-bezier(0.12, 0.8, 0.38, 1)`;
              spinner.style.transitionDuration = `${isSpinFast ? 0 : 2}s`;

              setIsGameStarted(false);
            }, time + 200);
          }
        }, 10);
      },
      isSpinFast ? 10 : 1000 * 3
    );
  };

  const updateItems = (shouldLimitUpdate = true, observerReload = false) => {
    let offset = 0;
    if (shouldLimitUpdate) {
      offset = itemsLimit();
      setItemsLimit((prev) => prev + 48);
    }
    socket.emit(
      "steam:market",
      { search: search(), asc: descending(), offset, limit: itemsLimit() },
      (data) => {
        if (data.msg) {
          toastr(data);
        }
        if (!data.error) {
          let iv = [];
          for (const item of data.data.inventory) {
            for (let i = 0; i < item.amount; i++) {
              iv.push({
                ...item,
                id: `${item.assetid}_${i}`,
              });
            }
          }
          if (shouldLimitUpdate) {
            iv = [...items(), ...iv];
          }
          if (observerReload || items().length !== data.data.total) {
            if (observer) {
              observer.disconnect();
            }
            setItems([...iv]);
            observer = new IntersectionObserver(
              function (entries) {
                if (entries[0].isIntersecting === true) {
                  updateItems();
                }
              },
              { threshold: [0] }
            );
            observer.observe(pageWrapper.childNodes.item(items().length - 9));
          } else if (iv[0]?.id !== items()[0]?.id) {
            setItems(iv);
          } else {
            if (observer) {
              observer.disconnect();
            }
          }
          
          if (!isItemsLoaded()){
            checkImageLoaded();
          }
        }
      }
    );
  };

  createEffect(() => {
    if(loaded()) {
      socket.emit("upgrader:connect", {}, (data) => {
        setGlobalHistory(
          data.globalHistory.filter((val) => val.winnings > 0).slice(0, 4)
        );
        onUpgraderPageLoad(true);
      });
  
      
    }
  })

  onMount(() => {
    socket.on("upgrader:history:global", (data) => {
      setGlobalHistory((prev) =>
        [data, ...prev].filter((val) => val.winnings > 0).slice(0, 4)
      );
    });

    updateItems(false);
    socket.on("steam:market:update", () => {
      updateItems(false);
    });

    socket.on("upgrader:spin", (data) => {
      if (!data.error) {
        spin(data.data.ticket, 4000);
      }
    });

    setInterval(() => {
      if (upgraderAnimation) {
        upgraderAnimation.classList.add("animate");
        setTimeout(() => {
          upgraderAnimation.classList.remove("animate");
        }, 4900);
      }
    }, 15000);
  });

  onCleanup(() => {
    socket.off("steam:market:update");
  });

  const setActive = (item) => {
    if (activeItem() == item) {
      playDeselectItemSound();
      return setActive({});
    }

    setActiveItem(item);
    playSelectItemSound();
    setBetValue(0);
  };

  const getBetPercent = (item) => {
    const maxBet =
      activeItem()?.price < userObject.user.balance
        ? 0.9
        : userObject.user.balance / activeItem()?.price;
    if (item === "max") {
      return maxBet;
    } else if (item === "x2") {
      if (activeItem()?.price) {
        const percent = Number(Number(betValue() / activeItem()?.price)) * 2;
        return percent <= maxBet ? percent : maxBet;
      } else {
        return 0;
      }
    } else {
      const tempNumber = activeItem()?.price * (item / 100);
      const finalBet = tempNumber / ((tempNumber * 0.9) / tempNumber);
      const finalPercent = finalBet / activeItem()?.price;
      return finalPercent <= maxBet ? finalPercent : maxBet;
    }
  };

  const inputValueUpdate = (e) => {
    const maxPrice = Math.round(activeItem()?.price * 0.9);
    const maxBet = userObject.user.balance;
    if (activeItem().price) {
      if (maxBet > maxPrice) {
        if (e.currentTarget.value > maxPrice) {
          e.currentTarget.value = maxPrice;
          setBetValue(maxPrice);
        } else {
          setBetValue(e.currentTarget.value);
        }
      } else {
        if (e.currentTarget.value > maxBet) {
          e.currentTarget.value = maxBet;
          setBetValue(maxBet);
        } else {
          setBetValue(e.currentTarget.value);
        }
      }
    } else {
      e.currentTarget.value = 0;
    }
  };

  const changeDescending = () => {
    setDescending((prev) => !prev);
    setItemsLimit(48);
    updateItems(false, true);
  };

  const sorting = {
    descending: {
      en: "Descending",
      es: "Descendiendo",
      ru: "по убыванию",
    },
    ascending: {
      en: "Ascending",
      es: "Ascendente",
      ru: "по возрастанию",
    },
  };

  return (
    <Fallback loaded={upgraderPageLoaded}>
      <img alt="background" src={Bg} class="absolute left-0 top-0 min-w-full md:min-h-full" />
      <div class="w-full h-full flex flex-col gap-20 overflow-y-scroll relative pt-12 min-h-screen">
        <div class="flex w-full gap-2 overflow-x-scroll pt-10">
          <For each={globalHistory()}>
            {(val, i) => (
              <div
                class="text-white w-80 h-20 bg-cover p-4 flex justify-between gap-4 items-center relative"
                style={{
                  "background-image":
                    val.winnings > 0
                      ? `url(${WinCardBg})`
                      : `url(${FailedCardBg})`,
                  "min-width": "342px",
                }}
              >
                {SNOWMODE &&
                  (i() === 1 ? (
                    <svg
                      class="absolute left-1/2 transform -translate-x-1/2 -top-4 z-30"
                      width="74"
                      height="25"
                      viewBox="0 0 74 25"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M1.01608 12.0717C-0.826942 10.2499 -0.0160111 7.88546 2.26934 6.17997C4.62841 4.47448 8.16702 3.38916 11.8531 2.61394C16.2026 1.76119 20.7733 1.2573 25.344 0.792164C32.495 0.0557016 40.3831 -0.642 46.7231 1.2573C48.9347 1.91624 50.9252 2.88527 53.4317 3.07907C56.528 3.31164 59.4031 2.26509 62.4994 2.18757C67.0701 2.03252 71.051 3.97058 72.6729 6.21873C74.2948 8.46688 74.0736 10.9088 73.7787 13.312C73.705 13.971 73.6313 14.6299 73.1152 15.2501C72.5992 15.7927 71.4934 16.2966 70.2401 16.2966C68.3234 16.2966 66.7752 15.1338 64.9322 15.3664C63.3103 15.5602 62.7943 16.6067 62.352 17.4207C61.9096 18.2735 60.5089 19.2037 58.9608 18.8936C58.1499 18.6998 57.7813 18.2347 57.0441 17.9246C55.4222 17.1494 52.6208 17.8083 51.5887 18.8161C50.4829 19.8239 50.4829 21.0255 50.1143 22.1496C49.672 23.2737 48.5661 24.514 46.502 24.8241C44.2903 25.1342 42.005 24.2427 41.0466 23.1574C40.0882 22.0721 40.0882 20.8317 39.9408 19.6301C39.7933 18.4285 39.4247 17.1494 37.9503 16.2579C35.1489 14.5136 29.7673 14.94 25.9338 16.0253C22.1003 17.1106 18.5617 18.6998 14.2121 18.9324C8.38818 19.2037 4.99702 15.9478 1.01608 12.0717Z"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M59.6247 11.2966C63.9005 10.0175 69.2822 10.4438 73.8529 9.55233C73.7054 8.38949 73.4105 7.26542 72.5996 6.1801C70.9777 3.93196 66.9231 1.9939 62.4261 2.14894C59.3298 2.26523 56.381 3.27302 53.3584 3.04045C50.8519 2.84664 48.8614 1.87761 46.6498 1.21867C40.3098 -0.680625 32.4954 0.0170763 25.3444 0.7923C20.7737 1.25743 16.203 1.76133 11.9272 2.65284C8.24115 3.42806 4.62882 4.51337 2.34347 6.21887C2.19603 6.33515 1.97487 6.49019 1.82742 6.60648C4.40766 8.93215 8.83092 10.8314 13.9177 10.9865C17.4563 11.064 20.8474 10.3276 24.3123 9.90118C27.5561 9.51357 30.8735 9.43604 34.1172 9.62985C36.1077 9.74613 38.2456 10.0175 39.4251 10.8702C41.3419 12.1493 40.3835 14.2037 42.374 15.444C43.8484 16.4131 46.6498 16.5681 48.8614 16.103C51.0731 15.6766 52.8424 14.7463 54.3905 13.8548C56.0124 12.8858 57.6342 11.9168 59.6247 11.2966Z"
                        fill="white"
                      />
                      <path
                        opacity="0.5"
                        d="M14.2864 18.9321C18.6359 18.6995 22.1746 17.1103 26.008 16.025C29.8415 14.9397 35.2232 14.5133 38.0246 16.2576C39.499 17.1491 39.8676 18.4282 40.015 19.6298C40.1625 20.8314 40.1625 22.0718 41.1209 23.1571C42.0792 24.2424 44.3646 25.1339 46.5762 24.8238C48.7141 24.5137 49.8199 23.3121 50.1885 22.1493C50.6309 21.0252 50.6309 19.8236 51.663 18.8158C52.7688 17.808 55.4965 17.1878 57.1183 17.9243C57.7818 18.2344 58.1504 18.7383 59.0351 18.8933C60.5832 19.2422 61.9839 18.2732 62.4262 17.4204C62.8686 16.5677 63.3846 15.5599 65.0065 15.3661C66.8495 15.1335 68.3976 16.2576 70.3144 16.2963C71.5676 16.2963 72.6735 15.7924 73.1895 15.211C73.7056 14.6296 73.7793 13.9319 73.853 13.273C73.9267 12.7303 74.0004 12.1877 74.0004 11.645C73.1895 11.9163 72.3786 12.2264 71.7151 12.5753C70.8304 13.0404 69.6509 13.6606 68.3976 13.428C67.8079 13.3117 67.3655 13.0404 66.8495 12.8466C65.0065 12.2264 62.5737 13.1954 62.0576 14.3195C61.8365 14.8622 61.689 15.5599 60.6569 15.7149C59.846 15.8312 59.0351 15.4824 58.8139 15.0947C58.5927 14.7071 59.6986 13.8156 58.8876 13.8156C53.8009 13.8156 50.5571 17.808 46.4288 19.8236C45.839 20.1337 45.1018 20.4438 44.2171 20.405C43.3325 20.3663 42.669 19.8624 42.4478 19.3972C42.2267 18.9321 42.3741 18.4282 42.3004 17.9631C42.0055 16.3739 39.5727 15.1723 37.3611 14.087C35.4443 13.1954 33.4539 12.2652 30.9474 11.8388C28.2197 11.3737 25.1971 11.5675 22.5432 12.1877C20.2578 12.6916 18.2673 13.5055 16.0557 14.087C13.8441 14.6684 11.2638 15.056 8.90477 14.7071C6.5457 14.3195 4.55523 13.2342 2.12244 13.1567C5.58732 16.5289 8.97849 19.2034 14.2864 18.9321Z"
                        fill="#BBDEFB"
                      />
                      <path
                        d="M11.6315 8.77767C12.0386 8.77767 12.3687 8.60413 12.3687 8.39005C12.3687 8.17598 12.0386 8.00244 11.6315 8.00244C11.2243 8.00244 10.8943 8.17598 10.8943 8.39005C10.8943 8.60413 11.2243 8.77767 11.6315 8.77767Z"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M66.1115 17.847C66.3151 17.847 66.4801 17.7603 66.4801 17.6532C66.4801 17.5462 66.3151 17.4594 66.1115 17.4594C65.9079 17.4594 65.7429 17.5462 65.7429 17.6532C65.7429 17.7603 65.9079 17.847 66.1115 17.847Z"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M53.9482 1.56766C54.7625 1.56766 55.4226 1.22058 55.4226 0.792436C55.4226 0.364291 54.7625 0.0172119 53.9482 0.0172119C53.1339 0.0172119 52.4738 0.364291 52.4738 0.792436C52.4738 1.22058 53.1339 1.56766 53.9482 1.56766Z"
                        fill="#E3F2FD"
                      />
                    </svg>
                  ) : i() === 3 ? (
                    <svg
                      class="absolute right-0 -top-4 z-30"
                      width="61"
                      height="31"
                      viewBox="0 0 61 31"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M42.8121 1.56727C47.4574 3.03005 51.9091 4.80629 55.1995 7.15719C58.4899 9.5081 60.5222 12.4337 59.9415 15.3592C59.6512 16.7175 58.5867 18.1803 56.264 18.6505C53.9414 19.1207 50.9413 18.4415 48.909 19.2774C46.4896 20.27 47.0703 22.9344 44.0702 23.3523C40.296 23.8225 39.3282 19.9043 35.5539 19.6431C33.5216 19.4864 31.7796 20.5312 31.1022 21.5761C30.4248 22.6209 30.4248 23.7702 29.5538 24.7628C28.6828 25.7555 26.5537 26.6436 24.715 26.1734C22.4891 25.651 22.5859 23.9792 22.3923 22.6732C22.2956 21.3671 20.1665 19.7476 18.1342 20.3745C16.0051 21.0536 17.36 23.0911 15.5212 23.927C14.1664 24.5539 11.8437 23.927 11.1663 23.0389C10.4889 22.1507 12.3276 20.9492 11.2631 20.1655C9.5211 18.9117 6.52104 21.994 6.71459 23.6135C6.90814 25.1808 8.26301 26.7481 8.06946 28.3153C7.8759 29.8826 4.87584 31.5543 2.26288 30.823C0.037024 30.196 0.037024 28.5243 0.327353 27.2182C1.00479 24.3449 4.00485 21.4193 2.45643 14.6801C1.87577 12.2247 2.06933 9.66483 3.90808 7.36616C5.55327 5.0675 9.134 3.0823 13.5857 2.55987C16.6825 2.14193 20.0697 2.45539 23.1666 1.88072C25.586 1.41054 27.6183 0.417938 30.0377 0"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M30.0381 0C27.5219 0.417938 25.5864 1.41054 23.0702 1.88072C20.0701 2.45539 16.6829 2.14193 13.4893 2.55987C9.13439 3.0823 5.55366 5.0675 3.71491 7.36616C3.61814 7.47065 3.52136 7.57513 3.52136 7.73186C4.10202 8.61998 4.00524 9.61258 4.29557 10.5007C4.5859 11.5455 5.36011 12.6426 7.19886 13.0606C10.3925 13.8442 14.1668 11.9635 17.2636 12.7994C18.4249 13.1128 19.1991 13.7397 19.9733 14.3144C21.425 15.4637 22.7798 16.6653 24.2315 17.8146C24.8121 18.2848 25.3928 18.8072 26.4573 18.964C28.6832 19.3819 30.6187 18.0758 31.3929 16.8743C32.1671 15.6727 33.2317 14.2099 35.5543 14.0532C38.7479 13.792 40.5867 16.2474 43.7803 16.6131C46.1029 16.8743 48.232 15.8817 50.1675 15.1503C53.1676 14.0532 56.458 13.374 59.9419 13.0083C59.3613 10.9186 57.7161 8.88119 55.2967 7.20944C51.9095 4.80629 47.4578 3.03005 42.8125 1.56727"
                        fill="white"
                      />
                      <path
                        opacity="0.5"
                        d="M2.06915 30.8228C4.68211 31.5542 7.68218 29.8824 7.87573 28.3152C8.06928 26.7479 6.71441 25.1806 6.52086 23.6133C6.32731 22.0461 9.32737 18.9115 11.0693 20.1654C12.1339 20.949 10.2951 22.1506 10.9726 23.0387C11.65 23.9268 13.9726 24.5015 15.3275 23.9268C17.263 23.0909 15.8114 21.0535 17.9405 20.3743C20.0695 19.7474 22.1018 21.3669 22.1986 22.673C22.2954 23.979 22.2954 25.6508 24.5213 26.1732C26.36 26.5912 28.5859 25.7553 29.3601 24.7627C30.2311 23.7701 30.2311 22.6207 30.9085 21.5759C31.5859 20.5311 33.3279 19.4862 35.3602 19.6429C39.2312 19.9041 40.1022 23.8746 43.8765 23.3521C46.8766 22.9864 46.1991 20.3221 48.7153 19.2772C50.7476 18.4414 53.7477 19.1205 56.0703 18.6503C58.1026 18.2324 59.1672 17.0831 59.651 15.8815C56.3606 15.986 52.9735 16.3517 49.7799 17.0831C47.7476 17.5532 45.9088 18.2324 44.2636 19.016C43.2959 19.5384 41.6507 20.1131 40.7797 19.5384C40.2958 19.225 40.4893 18.7548 40.3926 18.3891C40.0055 17.2398 37.1022 16.8741 35.2634 17.3965C33.3279 17.9189 32.1666 18.9115 30.8117 19.7997C30.8117 19.7997 30.8117 19.7997 30.8117 19.8519C28.8762 21.1057 25.2955 21.0535 23.4567 19.7474C23.1664 19.5384 22.7793 19.3295 22.489 19.1205C21.0373 18.2324 18.6179 17.9712 16.6824 18.5458H16.5856C15.6178 18.8071 14.5533 18.3891 14.5533 17.8144C14.5533 17.3965 14.263 16.9263 13.6823 16.6651C12.521 16.0905 10.4887 16.1949 9.52093 16.8218C8.74672 17.2398 8.55316 17.9712 7.87573 18.4414C7.1983 18.9638 5.35955 19.0683 5.06922 18.4414C4.97244 18.1801 5.26277 17.8667 5.45632 17.6055C6.32731 16.3517 4.58534 14.9411 2.26271 14.4187C2.26271 14.5232 2.26271 14.5754 2.26271 14.6799C3.71435 21.4192 0.714285 24.2925 0.133627 27.2181C-0.156702 28.5241 -0.156702 30.1959 2.06915 30.8228Z"
                        fill="#BBDEFB"
                      />
                      <path
                        d="M27.4244 17.1359C27.9588 17.1359 28.3921 16.902 28.3921 16.6135C28.3921 16.325 27.9588 16.0911 27.4244 16.0911C26.8899 16.0911 26.4566 16.325 26.4566 16.6135C26.4566 16.902 26.8899 17.1359 27.4244 17.1359Z"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M52.1992 21.4714C52.7337 21.4714 53.167 21.2375 53.167 20.9489C53.167 20.6604 52.7337 20.4265 52.1992 20.4265C51.6647 20.4265 51.2314 20.6604 51.2314 20.9489C51.2314 21.2375 51.6647 21.4714 52.1992 21.4714Z"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M46.2957 10.2393C46.563 10.2393 46.7796 10.1223 46.7796 9.97807C46.7796 9.83381 46.563 9.71686 46.2957 9.71686C46.0285 9.71686 45.8118 9.83381 45.8118 9.97807C45.8118 10.1223 46.0285 10.2393 46.2957 10.2393Z"
                        fill="#E3F2FD"
                      />
                      <path
                        d="M51.6184 12.0678C52.6874 12.0678 53.554 11.6 53.554 11.0229C53.554 10.4459 52.6874 9.97809 51.6184 9.97809C50.5495 9.97809 49.6829 10.4459 49.6829 11.0229C49.6829 11.6 50.5495 12.0678 51.6184 12.0678Z"
                        fill="#E3F2FD"
                      />
                    </svg>
                  ) : (
                    ""
                  ))}
                <img class="w-12" src={val.item?.image} alt={val.item?.name} />
                <div class="w-36 flex flex-col h-full justify-between">
                  <p class="text-white text-14 font-normal truncate">
                    {val.item?.name}
                  </p>
                  <div class="w-full flex items-center gap-2">
                    <Coin />
                    <p class="text-gray-8c text-14 font-medium font-Oswald">
                      {Number(val?.winnings).toLocaleString()}
                    </p>
                  </div>
                </div>
                <div class="flex flex-col h-full justify-between w-22">
                  {val.winnings > 0 ? (
                    <div class="flex items-center gap-1">
                      <svg
                        class="min-w-max"
                        width="15"
                        height="16"
                        viewBox="0 0 15 16"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <g clip-path="url(#clip0_136_75448)">
                          <path
                            d="M0.441162 4.66742V10.3753L7.49999 6.15386L14.5588 10.3753V4.66742L7.49999 0.445923L0.441162 4.66742Z"
                            stroke="#FFC701"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M14.5588 13.1282L7.49999 8.90674L0.441162 13.1282"
                            stroke="#EC981A"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                          <path
                            d="M0.441162 15.5541L7.49999 11.3326L14.5588 15.5541"
                            stroke="#A96500"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          />
                        </g>
                        <defs>
                          <clipPath id="clip0_136_75448">
                            <rect width="15" height="16" fill="white" />
                          </clipPath>
                        </defs>
                      </svg>
                      <span class="text-yellow-ff text-14 font-Oswald">
                        {i18n.t("upgrader.Upgraded")}
                      </span>
                    </div>
                  ) : (
                    <div class="flex items-center gap-1">
                      <svg
                        width="14"
                        height="14"
                        viewBox="0 0 14 14"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M13.7071 1.70711C14.0976 1.31658 14.0976 0.683417 13.7071 0.292893C13.3166 -0.0976311 12.6834 -0.0976311 12.2929 0.292893L7 5.58579L1.70711 0.292893C1.31658 -0.0976311 0.683417 -0.0976311 0.292893 0.292893C-0.0976311 0.683417 -0.0976311 1.31658 0.292893 1.70711L5.58579 7L0.292893 12.2929C-0.0976311 12.6834 -0.0976311 13.3166 0.292893 13.7071C0.683417 14.0976 1.31658 14.0976 1.70711 13.7071L7 8.41421L12.2929 13.7071C12.6834 14.0976 13.3166 14.0976 13.7071 13.7071C14.0976 13.3166 14.0976 12.6834 13.7071 12.2929L8.41421 7L13.7071 1.70711Z"
                          fill="#D32437"
                        />
                      </svg>
                      <span class="text-red-d3 text-14 font-Oswald">
                        {i18n.t("upgrader.Bet amount")}
                      </span>
                    </div>
                  )}
                  <div class="text-white text-14 font-medium font-Oswald">
                    X{" "}
                    {val?.bet
                      ? ((val.item?.price || 0) / (val?.bet || 1)).toFixed(2)
                      : 0}
                  </div>
                </div>
              </div>
            )}
          </For>
        </div>
        <div class="w-full flex flex-col xl:flex-row justify-center items-center 2xl:items-start gap-4 xxl:gap-48">
          <div class="flex flex-col-reverse md:flex-row justify-center gap-12 xl:gap-10 xxl:gap-48 w-full">
            <div class="flex w-full sm:w-1/2 fourk:w-1/4 max-w-[24rem] justify-evenly mt-14 z-10 p-7 xl:px-3 2xl:px-7 bet-info-bg relative">
              {SNOWMODE && (
                <>
                  <svg
                    class="absolute left-4 transform -top-4 z-30"
                    width="171"
                    height="36"
                    viewBox="0 0 171 36"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M4.43125 21.8332C-0.130951 20.3096 -1.49161 15.7386 1.87001 12.9351L1.95005 12.8742C4.11109 11.1067 6.91245 10.0097 9.7138 8.9127C16.277 6.35297 23.4004 3.67135 30.7639 4.52459C35.9665 5.13405 40.7688 7.45 45.9713 7.69378C52.4544 8.05945 58.5373 5.25594 65.0205 4.89027C72.0639 4.46365 79.0272 6.90148 86.1507 6.47486C96.5557 5.8654 105.6 -0.777696 115.925 0.0755462C122.968 0.685005 128.971 4.70743 136.015 5.07311C141.217 5.31689 146.98 3.61041 151.382 5.74351C154.744 7.38905 156.344 10.9239 160.266 11.5334C163.148 11.96 166.509 10.5582 168.911 12.0819C170.191 12.9351 170.591 14.215 170.191 15.4948C169.551 17.6889 167.23 19.0907 165.069 20.4315C160.667 23.0521 155.144 25.8556 149.941 24.3929C146.82 23.5397 144.099 21.2238 140.897 21.8942C139.536 22.1989 138.416 22.9302 137.135 23.4178C134.654 24.332 131.773 23.9663 129.051 23.9663C126.33 23.9663 123.128 24.6977 122.248 26.6479C121.528 28.1716 122.488 29.8781 123.048 31.4627C123.609 33.1082 123.209 35.3632 120.967 35.7898C119.607 36.0336 118.246 35.4851 117.526 34.5709C115.685 32.3159 117.126 29.6343 116.085 27.3183C115.205 25.429 112.723 24.1492 110.162 23.9054C108.641 23.7835 107.121 23.9663 105.6 24.4539C103.199 25.2462 100.558 25.1852 98.0764 24.5758C97.0359 24.332 96.0754 24.2101 94.9549 24.1492C92.3136 24.0882 89.5123 25.1852 88.7919 27.0746C88.2317 28.4763 88.6318 30.4266 86.871 31.036C85.9906 31.3408 85.0301 31.1579 84.3098 30.7313C83.1892 30 82.709 28.9639 82.1487 27.9278C80.3879 24.6367 75.9857 21.6504 71.5036 22.5646C67.3416 23.4178 64.3801 27.2574 60.2181 26.587C56.8565 26.0385 55.2558 22.8084 51.8941 22.2598C47.5721 21.5894 44.2104 25.8556 39.8083 25.6119C38.2075 25.49 36.8469 24.8196 35.3261 24.3929C33.8854 23.9054 32.0446 23.7225 30.7639 24.5148C29.4833 25.3071 29.4833 26.7089 29.8035 27.9278C30.0436 28.5982 30.2837 29.2686 30.5238 29.939C30.924 31.3408 30.3638 32.8644 29.0031 33.9005C25.9616 36.2164 21.4795 34.2662 21.0793 31.7064C20.8392 30.4875 21.4795 29.2077 21.8797 27.9888C22.2799 26.7698 22.2799 25.3071 21.1593 24.3929C20.0388 23.4788 18.2779 23.4178 16.5971 23.3569C12.6752 23.235 8.59326 23.174 4.43125 21.8332Z"
                      fill="#D9F1FF"
                    />
                    <path
                      d="M158.265 17.7501C161.547 16.7749 164.588 15.3732 167.87 14.2762C168.67 14.0324 169.471 13.7886 170.271 13.6058C170.031 13.0572 169.631 12.5087 169.07 12.1431C166.669 10.5585 163.308 12.0212 160.426 11.5945C156.504 10.9851 154.904 7.45022 151.542 5.80469C147.14 3.67158 141.377 5.37806 136.175 5.13428C129.131 4.76861 123.128 0.746179 116.085 0.13672C105.76 -0.716522 96.7155 5.86563 86.3105 6.53604C79.187 6.84076 72.2237 4.40293 65.1003 4.82955C58.6171 5.19523 52.5342 7.99874 46.0511 7.63306C40.7685 7.32833 36.0462 5.01239 30.8437 4.46388C23.5602 3.67158 16.3568 6.29225 9.79359 8.85198C6.99224 9.949 4.11085 11.046 2.02985 12.8135L1.94981 12.8744C1.38954 13.301 0.989344 13.8495 0.669189 14.3371C2.43004 16.4702 5.63158 17.811 8.91316 17.9329C13.0752 18.0548 17.1571 16.2264 21.2391 16.7749C25.3211 17.3235 28.4426 20.1879 32.5245 20.4317C37.0867 20.7364 41.4088 17.811 45.811 18.7252C47.8119 19.1518 49.6528 20.3707 51.7338 20.066C53.2545 19.8222 54.5352 18.7862 56.0559 18.969C57.8167 19.2128 58.4571 20.9802 60.0578 21.5287C61.8987 22.1382 63.8196 20.9802 65.5005 20.1879C70.5429 17.811 77.6663 18.4814 81.6682 21.7725C82.3085 22.2601 83.0289 22.6867 83.9093 22.9305C86.3905 23.6618 87.2709 22.321 88.5516 21.4068C90.9527 19.7003 94.6345 19.7003 97.9961 19.8222C102.238 20.0051 106.48 20.1879 110.722 20.7364C113.764 21.163 116.725 21.7725 119.847 21.7116C122.888 21.6506 126.17 20.7364 127.77 19.2128C128.811 18.1767 130.812 18.1767 132.493 18.4205C134.174 18.7252 135.854 19.2128 137.455 18.908C139.296 18.5424 140.657 17.2625 142.498 17.0187C144.418 16.7749 146.259 17.6891 148.1 18.2376C151.222 19.1518 154.984 18.6643 158.265 17.7501Z"
                      fill="white"
                    />
                    <path
                      opacity="0.5"
                      d="M0.350159 18.3572C0.990467 19.8199 2.35112 21.1607 4.43213 21.8311C8.51409 23.1719 12.6761 23.2329 16.8381 23.3548C18.4389 23.3548 20.2798 23.4767 21.4003 24.3909C22.5208 25.305 22.4408 26.7677 22.1207 27.9867C21.7205 29.2056 21.1602 30.4245 21.3203 31.7044C21.8005 34.2641 26.2026 36.1534 29.2441 33.8984C30.6047 32.8623 31.165 31.3996 30.7648 29.9369C30.5247 29.2665 30.2846 28.5961 30.0445 27.9257C29.7243 26.7068 29.7243 25.305 31.0049 24.5127C32.2055 23.7205 34.0464 23.9642 35.5671 24.3909C37.0078 24.8784 38.4485 25.5488 40.0493 25.6098C44.4514 25.8536 47.813 21.5873 52.1351 22.2578C55.4967 22.8063 57.0975 26.0364 60.4591 26.5849C64.6211 27.2553 67.6626 23.4157 71.7446 22.5625C76.2267 21.6483 80.6289 24.6956 82.3897 27.9257C82.95 28.9009 83.3502 29.9979 84.5507 30.7292C85.2711 31.1558 86.3116 31.3387 87.112 31.034C88.8728 30.4245 88.4726 28.4742 89.0329 27.0725C89.7533 25.1832 92.6346 24.1471 95.1959 24.1471C96.2364 24.1471 97.2769 24.3299 98.3174 24.5737C100.799 25.1222 103.44 25.1832 105.841 24.4518C107.362 23.9642 108.882 23.7814 110.403 23.9033C112.964 24.1471 115.526 25.4269 116.326 27.3163C117.367 29.6322 115.926 32.3138 117.767 34.5688C118.487 35.483 119.848 35.9706 121.208 35.7877C123.53 35.3611 123.85 33.1671 123.289 31.4606C122.729 29.876 121.769 28.2304 122.489 26.6459C123.369 24.6956 126.571 24.0252 129.292 23.9642C132.014 23.9642 134.895 24.3299 137.376 23.4157C138.657 22.9282 139.697 22.1359 141.138 21.8921C144.34 21.2826 147.061 23.5376 150.182 24.3909C155.465 25.8536 160.908 23.05 165.31 20.4294C167.151 19.3323 169.071 18.1134 170.032 16.4679C168.111 17.1383 166.43 18.2963 164.349 18.6619C162.348 19.0276 160.107 18.6619 158.186 19.2105C155.065 20.0637 152.824 23.2329 149.062 21.2826C148.582 21.0388 148.181 20.7341 147.781 20.4294C147.781 20.4294 147.781 20.4294 147.781 20.3684C146.1 19.0276 143.459 18.6619 141.378 19.5761C136.896 21.5264 130.973 21.5264 125.611 22.5015C124.17 22.7453 122.649 23.111 121.529 23.9033C120.408 24.6956 119.768 25.9754 120.328 27.0115C120.568 27.4382 120.968 27.8648 121.048 28.2914C121.048 28.779 120.328 29.2665 119.848 28.9009C119.688 28.779 119.608 28.5961 119.608 28.3523C118.887 25.1832 114.885 22.9282 110.803 22.1968C107.842 21.7092 102.72 22.0749 99.9982 22.3187C98.8777 22.4406 97.8372 22.5015 96.7166 22.5015C93.9153 22.5625 88.1525 22.9891 86.5517 25.1832C86.2316 25.6098 85.9114 26.0973 85.2711 26.1583C84.4707 26.2802 83.9104 25.6707 83.4302 25.1222C80.2287 21.4655 73.9056 20.7951 68.2229 21.5264C66.462 21.8921 65.2615 22.4406 64.0609 23.1719C62.9403 23.9033 61.4196 24.5127 60.0589 24.208C59.2586 24.0252 58.6182 23.4767 57.9779 23.05C54.8564 21.0388 50.3743 20.6732 46.2923 20.9779C41.6501 21.2826 37.0879 22.3187 32.4456 21.953C31.7253 21.8921 31.085 21.8921 30.3646 22.014C26.4427 22.8063 27.083 24.9394 27.1631 26.8287C27.2431 28.0476 26.4427 30.7292 25.2422 29.9369C23.7214 28.9618 25.9625 26.8896 25.7224 25.366C25.5623 23.8423 24.6819 22.2578 23.0811 21.3436C21.0001 20.1246 18.1187 20.1856 15.4775 20.2465C11.8757 20.3075 8.19394 20.3684 4.67224 19.698C3.23155 19.3324 1.79085 18.9057 0.350159 18.3572Z"
                      fill="#B4DCFF"
                    />
                  </svg>
                  <svg
                    class="absolute right-0 transform -bottom-4 z-30"
                    width="74"
                    height="25"
                    viewBox="0 0 74 25"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M1.01608 12.0717C-0.826942 10.2499 -0.0160111 7.88546 2.26934 6.17997C4.62841 4.47448 8.16702 3.38916 11.8531 2.61394C16.2026 1.76119 20.7733 1.2573 25.344 0.792164C32.495 0.0557016 40.3831 -0.642 46.7231 1.2573C48.9347 1.91624 50.9252 2.88527 53.4317 3.07907C56.528 3.31164 59.4031 2.26509 62.4994 2.18757C67.0701 2.03252 71.051 3.97058 72.6729 6.21873C74.2948 8.46688 74.0736 10.9088 73.7787 13.312C73.705 13.971 73.6313 14.6299 73.1152 15.2501C72.5992 15.7927 71.4934 16.2966 70.2401 16.2966C68.3234 16.2966 66.7752 15.1338 64.9322 15.3664C63.3103 15.5602 62.7943 16.6067 62.352 17.4207C61.9096 18.2735 60.5089 19.2037 58.9608 18.8936C58.1499 18.6998 57.7813 18.2347 57.0441 17.9246C55.4222 17.1494 52.6208 17.8083 51.5887 18.8161C50.4829 19.8239 50.4829 21.0255 50.1143 22.1496C49.672 23.2737 48.5661 24.514 46.502 24.8241C44.2903 25.1342 42.005 24.2427 41.0466 23.1574C40.0882 22.0721 40.0882 20.8317 39.9408 19.6301C39.7933 18.4285 39.4247 17.1494 37.9503 16.2579C35.1489 14.5136 29.7673 14.94 25.9338 16.0253C22.1003 17.1106 18.5617 18.6998 14.2121 18.9324C8.38818 19.2037 4.99702 15.9478 1.01608 12.0717Z"
                      fill="#E3F2FD"
                    />
                    <path
                      d="M59.6247 11.2966C63.9005 10.0175 69.2822 10.4438 73.8529 9.55233C73.7054 8.38949 73.4105 7.26542 72.5996 6.1801C70.9777 3.93196 66.9231 1.9939 62.4261 2.14894C59.3298 2.26523 56.381 3.27302 53.3584 3.04045C50.8519 2.84664 48.8614 1.87761 46.6498 1.21867C40.3098 -0.680625 32.4954 0.0170763 25.3444 0.7923C20.7737 1.25743 16.203 1.76133 11.9272 2.65284C8.24115 3.42806 4.62882 4.51337 2.34347 6.21887C2.19603 6.33515 1.97487 6.49019 1.82742 6.60648C4.40766 8.93215 8.83092 10.8314 13.9177 10.9865C17.4563 11.064 20.8474 10.3276 24.3123 9.90118C27.5561 9.51357 30.8735 9.43604 34.1172 9.62985C36.1077 9.74613 38.2456 10.0175 39.4251 10.8702C41.3419 12.1493 40.3835 14.2037 42.374 15.444C43.8484 16.4131 46.6498 16.5681 48.8614 16.103C51.0731 15.6766 52.8424 14.7463 54.3905 13.8548C56.0124 12.8858 57.6342 11.9168 59.6247 11.2966Z"
                      fill="white"
                    />
                    <path
                      opacity="0.5"
                      d="M14.2864 18.9322C18.6359 18.6996 22.1746 17.1104 26.008 16.0251C29.8415 14.9398 35.2232 14.5134 38.0246 16.2576C39.499 17.1491 39.8676 18.4283 40.015 19.6299C40.1625 20.8315 40.1625 22.0718 41.1209 23.1571C42.0792 24.2424 44.3646 25.134 46.5762 24.8239C48.7141 24.5138 49.8199 23.3122 50.1885 22.1493C50.6309 21.0253 50.6309 19.8237 51.663 18.8159C52.7688 17.8081 55.4965 17.1879 57.1183 17.9244C57.7818 18.2345 58.1504 18.7384 59.0351 18.8934C60.5832 19.2423 61.9839 18.2732 62.4262 17.4205C62.8686 16.5677 63.3846 15.5599 65.0065 15.3661C66.8495 15.1336 68.3976 16.2576 70.3144 16.2964C71.5676 16.2964 72.6735 15.7925 73.1895 15.2111C73.7056 14.6297 73.7793 13.932 73.853 13.273C73.9267 12.7304 74.0004 12.1877 74.0004 11.6451C73.1895 11.9164 72.3786 12.2265 71.7151 12.5753C70.8304 13.0405 69.6509 13.6606 68.3976 13.4281C67.8079 13.3118 67.3655 13.0405 66.8495 12.8467C65.0065 12.2265 62.5737 13.1955 62.0576 14.3196C61.8365 14.8622 61.689 15.5599 60.6569 15.715C59.846 15.8313 59.0351 15.4824 58.8139 15.0948C58.5927 14.7072 59.6986 13.8157 58.8876 13.8157C53.8009 13.8157 50.5571 17.8081 46.4288 19.8237C45.839 20.1338 45.1018 20.4438 44.2171 20.4051C43.3325 20.3663 42.669 19.8624 42.4478 19.3973C42.2267 18.9322 42.3741 18.4283 42.3004 17.9631C42.0055 16.3739 39.5727 15.1723 37.3611 14.087C35.4443 13.1955 33.4539 12.2652 30.9474 11.8389C28.2197 11.3737 25.1971 11.5675 22.5432 12.1877C20.2578 12.6916 18.2673 13.5056 16.0557 14.087C13.8441 14.6684 11.2638 15.056 8.90477 14.7072C6.5457 14.3196 4.55523 13.2343 2.12244 13.1567C5.58732 16.529 8.97849 19.2035 14.2864 18.9322Z"
                      fill="#BBDEFB"
                    />
                    <path
                      d="M11.6315 8.77767C12.0386 8.77767 12.3687 8.60413 12.3687 8.39005C12.3687 8.17598 12.0386 8.00244 11.6315 8.00244C11.2243 8.00244 10.8943 8.17598 10.8943 8.39005C10.8943 8.60413 11.2243 8.77767 11.6315 8.77767Z"
                      fill="#E3F2FD"
                    />
                    <path
                      d="M66.1115 17.847C66.3151 17.847 66.4801 17.7602 66.4801 17.6532C66.4801 17.5461 66.3151 17.4594 66.1115 17.4594C65.908 17.4594 65.7429 17.5461 65.7429 17.6532C65.7429 17.7602 65.908 17.847 66.1115 17.847Z"
                      fill="#E3F2FD"
                    />
                    <path
                      d="M53.9482 1.56766C54.7625 1.56766 55.4226 1.22058 55.4226 0.792436C55.4226 0.364291 54.7625 0.0172119 53.9482 0.0172119C53.1339 0.0172119 52.4738 0.364291 52.4738 0.792436C52.4738 1.22058 53.1339 1.56766 53.9482 1.56766Z"
                      fill="#E3F2FD"
                    />
                  </svg>
                </>
              )}
              <div class="flex flex-col gap-6 w-full">
                <div class="relative flex gap-2 justify-center">
                  <div
                    class={`center relative hover w-30 h-8 bg-dark-27 rounded-2 bg-cover scrolling-btn-wrapper-gray overflow-hidden group ${
                      over() ? "text-dark-43" : "text-dark-27"
                    }`}
                    style={{
                      "background-image": `url(${over() ? GrayButtonBg : ""})`,
                    }}
                    onClick={() => {
                      playOptionClickSound();
                      !isGameStarted() && setOver(true);
                    }}
                  >
                    {" "}
                    {/*TODO: CHANGE THE TURNARY CONDITION TO EMIT AN ERROR MESSAGE ON FALSE */}
                    <div class="scrolling-btn-image-gray absolute left-0 top-0 hidden group-hover:block" />
                    <p
                      class={`text-14 duration-200 ${
                        over() ? "text-dark-1b" : "text-gray-8c"
                      } group-hover:text-dark-1b font-medium font-Oswald uppercase z-10 px-4`}
                    >
                      {i18n.t("upgrader.Roll over")}
                    </p>
                  </div>
                  <div
                    class={`center relative hover w-30 h-8 bg-dark-27 rounded-2 bg-cover scrolling-btn-wrapper-gray overflow-hidden group ${
                      !over() ? "text-dark-43" : "text-dark-27"
                    }`}
                    style={{
                      "background-image": `url(${!over() ? GrayButtonBg : ""})`,
                    }}
                    onClick={() => {
                      playOptionClickSound();
                      !isGameStarted() && setOver(false);
                    }}
                  >
                    <div class="scrolling-btn-image-gray absolute left-0 top-0 hidden group-hover:block" />
                    <p
                      class={`text-14 duration-200 ${
                        !over() ? "text-dark-1b" : "text-gray-8c"
                      } group-hover:text-dark-1b font-medium font-Oswald uppercase z-10 px-4`}
                    >
                      {i18n.t("upgrader.Roll under")}
                    </p>
                  </div>
                </div>

                <div class="flex flex-col gap-2">
                  <p class="text-14 text-gray-8c font-normal">
                    {i18n.t("upgrader.Your balance")}
                  </p>
                  <div class="relative center bg-dark-27 w-full h-10 rounded-2">
                    <div class="absolute left-4">
                      <Coin />
                    </div>
                    <div
                      class="absolute right-2 cursor-pointer z-10"
                      onClick={() => {
                        playOptionClickSound();
                        setBetValue(0);
                      }}
                    >
                      <svg
                        width="22"
                        height="22"
                        viewBox="0 0 22 22"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <circle cx="11" cy="11" r="11" fill="#666E97" />
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M6 7.2H16H6ZM14.8889 7.2V14.9C14.8889 15.1917 14.7718 15.4715 14.5635 15.6778C14.3551 15.8841 14.0725 16 13.7778 16H8.22222C7.92754 16 7.64492 15.8841 7.43655 15.6778C7.22817 15.4715 7.11111 15.1917 7.11111 14.9V7.2M8.77778 7.2V6.1C8.77778 5.80826 8.89484 5.52847 9.10321 5.32218C9.31159 5.11589 9.5942 5 9.88889 5H12.1111C12.4058 5 12.6884 5.11589 12.8968 5.32218C13.1052 5.52847 13.2222 5.80826 13.2222 6.1V7.2"
                          fill="#666E97"
                        />
                        <path
                          d="M6 7.2H16M14.8889 7.2V14.9C14.8889 15.1917 14.7718 15.4715 14.5635 15.6778C14.3551 15.8841 14.0725 16 13.7778 16H8.22222C7.92754 16 7.64492 15.8841 7.43655 15.6778C7.22817 15.4715 7.11111 15.1917 7.11111 14.9V7.2M8.77778 7.2V6.1C8.77778 5.80826 8.89484 5.52847 9.10321 5.32218C9.31159 5.11589 9.5942 5 9.88889 5H12.1111C12.4058 5 12.6884 5.11589 12.8968 5.32218C13.1052 5.52847 13.2222 5.80826 13.2222 6.1V7.2"
                          stroke="white"
                          stroke-width="1.1"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </div>
                    <input
                      class="absolute w-full h-full text-14 text-white font-medium pl-14 placeholder-white"
                      type="number"
                      onInput={(e) => !isGameStarted() && inputValueUpdate(e)}
                      value={betValue()}
                      placeholder="0"
                    />
                  </div>
                  <div class="grid grid-cols-5 gap-2 justify-between flex-wrap sm:flex-nowrap">
                    <For each={[10, 25, 50, "x2", "max"]}>
                      {(val) => (
                        <div
                          class="relative center cursor-pointer duration-200 text-dark-27 hover:text-dark-43 h-8 bg-dark-27 rounded-2 bg-cover scrolling-btn-wrapper-gray overflow-hidden group no-select"
                          style={{
                            "background-image": `url(${
                              betPeack() === val ? GrayButtonBg : ""
                            })`,
                          }}
                          onClick={() => {
                            playOptionClickSound();
                            setBetPeack(val);
                            !isGameStarted() &&
                              setBetValue(
                                Math.round(
                                  activeItem()?.price * getBetPercent(val)
                                ) || 0
                              );
                          }}
                        >
                          <div class="scrolling-btn-image-gray absolute left-0 top-0 hidden group-hover:block" />
                          <p
                            class={`absolute ${
                              betPeack() === val
                                ? "text-dark-1b"
                                : "text-gray-8c"
                            } group-hover:text-dark-1b duration-200 text-14 font-medium font-Oswald uppercase`}
                          >
                            {val}
                            {val == "max" || val == "x2" ? "" : "%"}
                          </p>
                        </div>
                      )}
                    </For>
                  </div>
                  <div
                    class="items-center gap-3 mt-2 cursor-pointer hidden sm:flex xl:hidden 2xl:flex"
                    onClick={() => {
                      if (!spinning()) {
                        playOptionClickSound();
                        setFastSpinner((prev) => !prev);
                      }
                    }}
                  >
                    <div
                      class={`w-6 h-6 duration-200 ${
                        fastSpinner() ? "bg-yellow-ff" : "bg-dark-22"
                      } center`}
                    >
                      <svg
                        width="9"
                        height="7"
                        viewBox="0 0 9 7"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fill-rule="evenodd"
                          clip-rule="evenodd"
                          d="M8.7545 0.19505C9.06099 0.47368 9.08358 0.948016 8.80495 1.25451L3.80495 6.7545C3.66699 6.90627 3.47289 6.99491 3.26784 6.99979C3.0628 7.00467 2.8647 6.92536 2.71967 6.78033L0.21967 4.28033C-0.0732233 3.98744 -0.0732233 3.51257 0.21967 3.21967C0.512563 2.92678 0.987436 2.92678 1.28033 3.21967L3.22414 5.16349L7.69504 0.2455C7.97367 -0.0609924 8.44801 -0.0835799 8.7545 0.19505Z"
                          fill="#161B2A"
                        />
                      </svg>
                    </div>
                    <p class="text-14 text-gray-8c font-normal capitalize">
                      {i18n.t("upgrader.Fast spinner")}
                    </p>
                  </div>
                </div>

                <div
                  class="relative center cursor-pointer hover h-10 w-full overflow-hidden rounded-2 bg-cover group scrolling-btn-wrapper"
                  style={{ "background-image": `url(${YellowButtonBg})` }}
                  onClick={bet}
                >
                  <div class="scrolling-btn-image hidden group-hover:block absolute left-0 top-0" />
                  <p class="absolute text-dark-16 text-14 font-medium font-Oswald uppercase">
                    {i18n.t("upgrader.Upgrade")}
                  </p>
                </div>
              </div>

              <div class="" />
            </div>

            <div class="flex flex-col items-center gap-2 relative mx-auto sm:mx-0 w-80 xl:w-52 transform xl:translate-y-1/4 2xl:translate-y-0 2xl:w-80">
              {SNOWMODE && <UpgraderSnow />}
              <img
                alt="oil" 
                src={Oil}
                class="absolute hidden sm:block xl:hidden 2xl:block -bottom-1 xl:-bottom-2 fourk:-bottom-4"
                style={{
                  "min-width": "140%",
                }}
              />
              <img
                alt="oil" 
                src={Oil}
                class="absolute block w-full sm:hidden"
                style={{
                  bottom: "-4%",
                }}
              />
              <img
                alt="oil" 
                src={Oil}
                class="absolute hidden xl:block 2xl:hidden"
                style={{
                  bottom: "23%",
                  "min-width": "140%",
                }}
              />
              <div
                class={`absolute upgrader-pipe bottom-0 hidden sm:block xl:hidden 2xl:block ${
                  spinning() && !fastSpinner() ? "animate" : ""
                }`}
                style={{
                  left: "-26.5rem",
                }}
              />
              <img alt="dome" src={Dome} class="w-full relative" />
              <div
                class={`w-full absolute h-80 xl:h-52 2xl:h-max fourk:h-80`}
                ref={spinner}
              >
                <ChartJS
                  betValue={betValue}
                  activeItem={activeItem}
                  over={over}
                />
              </div>

              <svg
                class="absolute -top-8"
                width="34"
                height="31"
                viewBox="0 0 34 31"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g filter="url(#filter0_d_426_54086)">
                  <path
                    d="M17.1006 22.5634L4.00007 0.127386L29.9805 2.67625e-05L17.1006 22.5634Z"
                    fill="url(#paint0_linear_426_54086)"
                  />
                </g>
                <defs>
                  <filter
                    id="filter0_d_426_54086"
                    x="0"
                    y="0"
                    width="33.9805"
                    height="30.5634"
                    filterUnits="userSpaceOnUse"
                    color-interpolation-filters="sRGB"
                  >
                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                    <feColorMatrix
                      in="SourceAlpha"
                      type="matrix"
                      values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                      result="hardAlpha"
                    />
                    <feOffset dy="4" />
                    <feGaussianBlur stdDeviation="2" />
                    <feComposite in2="hardAlpha" operator="out" />
                    <feColorMatrix
                      type="matrix"
                      values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"
                    />
                    <feBlend
                      mode="normal"
                      in2="BackgroundImageFix"
                      result="effect1_dropShadow_426_54086"
                    />
                    <feBlend
                      mode="normal"
                      in="SourceGraphic"
                      in2="effect1_dropShadow_426_54086"
                      result="shape"
                    />
                  </filter>
                  <linearGradient
                    id="paint0_linear_426_54086"
                    x1="17.1005"
                    y1="22.5635"
                    x2="16.9535"
                    y2="-7.43618"
                    gradientUnits="userSpaceOnUse"
                  >
                    <stop offset="0.00520833" stop-color="#FFED01" />
                    <stop offset="0.421875" stop-color="#FCAE00" />
                  </linearGradient>
                </defs>
              </svg>
              <div
                ref={upgraderAnimation}
                class="absolute will-change-auto -left-[28%] -top-[19%] xl:-left-[71%] xl:-top-[35%] xll:-left-[27%] xll:-top-[20%] xxl:-left-[34%] xxl:-top-[19%] scale-40 xl:scale-[.3] xxl:scale-40 fourk:-top-[19%] fourk:-left-[27%] upgrader-animation"
              />
              {/* <div class={`absolute char-fall left-0 bottom-0`}></div> */}
              <img
                alt="elements" 
                src={Elements}
                class="absolute"
                style={{
                  top: "8%",
                  right: "3.5%",
                  width: "96%",
                }}
              />

              <img
                alt="sign" 
                src={Sign}
                class="absolute w-full"
                style={{
                  top: "44.5%",
                  left: "23%",
                  width: "32%",
                }}
              />
              <p
                class="text-20 text-white font-semibold font-Oswald absolute xl:hidden 2xl:block"
                style={{
                  top: "55%",
                  left: "40%",
                  transform: "rotate(-27deg) translateX(-50%) translateY(-50%)",
                }}
              >
                {activeItem().price
                  ? (
                      ((betValue() || 0) / (activeItem().price || 1)) *
                      90
                    ).toFixed(2)
                  : new Number(0).toFixed(2)}
                %
              </p>
              <p
                class="text-16 text-white font-semibold font-Oswald absolute hidden xl:block 2xl:hidden"
                style={{
                  top: "51%",
                  left: "40%",
                  transform: "rotate(-27deg) translateX(-50%) translateY(-50%)",
                }}
              >
                {activeItem().price
                  ? (
                      ((betValue() || 0) / (activeItem().price || 1)) *
                      90
                    ).toFixed(2)
                  : new Number(0).toFixed(2)}
                %
              </p>
              <p
                class="text-gray-8c text-14 font-medium font-Oswald absolute -bottom-12 xl:bottom-5 2xl:-bottom-12 left-3"
                classList={{ hidden: isGameStarted() }}
              >
                {currentGameId()}
              </p>
              <p
                class="text-gray-8c text-14 font-medium font-Oswald absolute -bottom-8 xl:bottom-10 2xl:-bottom-8 -left-80"
                classList={{ hidden: isGameStarted() }}
              >
                {currentGameRoll() ? "Your previous ticket:" : ""}{" "}
                {currentGameRoll()}
              </p>
            </div>
          </div>

          <div class="relative center h-80 w-80 xxl:w-112 mt-16">
            {SNOWMODE && (
              <svg
                class="absolute left-1/2 transform -translate-x-1/2 -top-4 z-30"
                width="163"
                height="40"
                viewBox="0 0 163 40"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M3.76506 24.3624C-0.111264 22.6622 -1.26736 17.5618 1.58888 14.4335L1.65689 14.3655C3.49304 12.3933 5.87324 11.1692 8.25345 9.94513C13.8299 7.08889 19.8824 4.09664 26.139 5.04872C30.5593 5.72878 34.6397 8.313 39.0601 8.58502C44.5685 8.99305 49.737 5.86479 55.2454 5.45675C61.2299 4.98071 67.1464 7.70094 73.199 7.2249C82.0397 6.54485 89.7244 -0.867783 98.4971 0.0842974C104.482 0.764355 109.582 5.25274 115.567 5.66077C119.987 5.93279 124.883 4.02863 128.624 6.40883C131.48 8.24499 132.84 12.1893 136.172 12.8694C138.621 13.3454 141.477 11.7813 143.517 13.4814C144.605 14.4335 144.945 15.8616 144.605 17.2898C144.061 19.738 142.089 21.3021 140.253 22.7982C136.512 25.7225 131.82 28.8507 127.4 27.2186C124.747 26.2665 122.435 23.6823 119.715 24.4304C118.559 24.7704 117.607 25.5865 116.519 26.1305C114.41 27.1506 111.962 26.7426 109.65 26.7426C107.338 26.7426 104.618 27.5586 103.87 29.7348C103.258 31.435 104.074 33.3391 104.55 35.1073C105.026 36.9434 104.686 39.4596 102.781 39.9357C101.625 40.2077 100.469 39.5957 99.8572 38.5756C98.2931 36.0594 99.5172 33.0671 98.6331 30.4829C97.8851 28.3747 95.7769 26.9466 93.6007 26.6746C92.3086 26.5385 91.0165 26.7426 89.7244 27.2866C87.6842 28.1707 85.44 28.1027 83.3318 27.4226C82.4477 27.1506 81.6317 27.0146 80.6796 26.9466C78.4354 26.8786 76.0552 28.1027 75.4432 30.2109C74.9671 31.775 75.3071 33.9512 73.811 34.6312C73.063 34.9713 72.2469 34.7672 71.6348 34.2912C70.6827 33.4751 70.2747 32.319 69.7987 31.1629C68.3025 27.4906 64.5622 24.1583 60.7539 25.1784C57.2176 26.1305 54.7014 30.4149 51.1651 29.6668C48.3088 29.0548 46.9487 25.4505 44.0925 24.8384C40.4202 24.0903 37.5639 28.8507 33.8236 28.5787C32.4635 28.4427 31.3074 27.6946 30.0153 27.2186C28.7912 26.6746 27.2271 26.4705 26.139 27.3546C25.0509 28.2387 25.0509 29.8028 25.3229 31.1629C25.5269 31.911 25.7309 32.6591 25.9349 33.4071C26.275 34.9713 25.7989 36.6714 24.6428 37.8275C22.0586 40.4117 18.2503 38.2355 17.9103 35.3793C17.7062 34.0192 18.2503 32.5911 18.5903 31.2309C18.9304 29.8708 18.9304 28.2387 17.9783 27.2186C17.0262 26.1985 15.5301 26.1305 14.1019 26.0625C10.7697 25.9265 7.30136 25.8585 3.76506 24.3624Z"
                  fill="#D9F1FF"
                />
                <path
                  d="M134.472 19.8062C137.26 18.7181 139.844 17.1539 142.632 15.9298C143.312 15.6578 143.992 15.3858 144.673 15.1818C144.469 14.5697 144.129 13.9577 143.652 13.5496C141.612 11.7815 138.756 13.4136 136.308 12.9376C132.976 12.2575 131.615 8.3132 128.759 6.47704C125.019 4.09684 120.122 6.001 115.702 5.72898C109.718 5.32094 104.617 0.83256 98.6326 0.152502C89.8599 -0.799578 82.1753 6.54504 73.3345 7.29311C67.282 7.63314 61.3655 4.91291 55.313 5.38895C49.8045 5.79698 44.6361 8.92525 39.1276 8.51721C34.6392 8.17718 30.6269 5.59296 26.2065 4.98091C20.018 4.09684 13.8975 7.02109 8.32099 9.87733C5.94078 11.1014 3.49258 12.3255 1.72443 14.2977L1.65642 14.3657C1.18038 14.8417 0.840352 15.4538 0.568329 15.9978C2.06446 18.378 4.78469 19.8742 7.57292 20.0102C11.1092 20.1462 14.5775 18.106 18.0458 18.7181C21.5141 19.3301 24.1663 22.5264 27.6346 22.7984C31.511 23.1385 35.1833 19.8742 38.9236 20.8943C40.6237 21.3703 42.1879 22.7304 43.956 22.3904C45.2481 22.1184 46.3362 20.9623 47.6283 21.1663C49.1244 21.4383 49.6685 23.4105 51.0286 24.0225C52.5927 24.7026 54.2249 23.4105 55.653 22.5264C59.9374 19.8742 65.9899 20.6222 69.3902 24.2945C69.9342 24.8386 70.5463 25.3146 71.2943 25.5867C73.4025 26.4027 74.1506 24.9066 75.2387 23.8865C77.2788 21.9824 80.4071 21.9824 83.2633 22.1184C86.8677 22.3224 90.472 22.5264 94.0763 23.1385C96.6605 23.6145 99.1767 24.2946 101.829 24.2265C104.413 24.1585 107.201 23.1385 108.561 21.4383C109.446 20.2822 111.146 20.2822 112.574 20.5542C114.002 20.8943 115.43 21.4383 116.79 21.0983C118.354 20.6902 119.51 19.2621 121.075 18.9901C122.707 18.7181 124.271 19.7382 125.835 20.3502C128.487 21.3703 131.683 20.8263 134.472 19.8062Z"
                  fill="white"
                />
                <path
                  opacity="0.5"
                  d="M0.296997 20.4865C0.841043 22.1186 1.99714 23.6147 3.76529 24.3628C7.23358 25.8589 10.7699 25.9269 14.3062 26.0629C15.6663 26.0629 17.2304 26.199 18.1825 27.219C19.1346 28.2391 19.0666 29.8713 18.7946 31.2314C18.4545 32.5915 17.9785 33.9516 18.1145 35.3797C18.5225 38.236 22.2629 40.3442 24.8471 37.8279C26.0032 36.6718 26.4792 35.0397 26.1392 33.4076C25.9352 32.6595 25.7312 31.9114 25.5271 31.1634C25.2551 29.8033 25.2551 28.2391 26.3432 27.3551C27.3633 26.471 28.9274 26.743 30.2195 27.219C31.4436 27.7631 32.6677 28.5112 34.0279 28.5792C37.7682 28.8512 40.6244 24.0908 44.2967 24.8388C47.153 25.4509 48.5131 29.0552 51.3693 29.6673C54.9056 30.4153 57.4898 26.131 60.9581 25.1789C64.7665 24.1588 68.5068 27.5591 70.0029 31.1634C70.4789 32.2515 70.819 33.4756 71.8391 34.2916C72.4511 34.7677 73.3352 34.9717 74.0152 34.6317C75.5114 33.9516 75.1713 31.7754 75.6474 30.2113C76.2594 28.1031 78.7076 26.947 80.8838 26.947C81.7679 26.947 82.652 27.151 83.5361 27.4231C85.6442 28.0351 87.8884 28.1031 89.9286 27.2871C91.2207 26.743 92.5128 26.539 93.8049 26.675C95.9811 26.947 98.1573 28.3751 98.8374 30.4833C99.7214 33.0675 98.4973 36.0598 100.061 38.576C100.674 39.5961 101.83 40.1401 102.986 39.9361C104.958 39.4601 105.23 37.0119 104.754 35.1077C104.278 33.3396 103.462 31.5034 104.074 29.7353C104.822 27.5591 107.542 26.811 109.854 26.743C112.166 26.743 114.615 27.151 116.723 26.131C117.811 25.5869 118.695 24.7028 119.919 24.4308C122.639 23.7508 124.952 26.267 127.604 27.219C132.092 28.8512 136.717 25.7229 140.457 22.7987C142.021 21.5746 143.653 20.2145 144.469 18.3783C142.837 19.1264 141.409 20.4185 139.641 20.8265C137.941 21.2345 136.037 20.8265 134.404 21.4386C131.752 22.3906 129.848 25.9269 126.652 23.7508C126.244 23.4787 125.904 23.1387 125.564 22.7987C125.564 22.7987 125.564 22.7987 125.564 22.7307C124.136 21.2345 121.891 20.8265 120.123 21.8466C116.315 24.0228 111.282 24.0228 106.726 25.1109C105.502 25.3829 104.21 25.7909 103.258 26.675C102.306 27.5591 101.762 28.9872 102.238 30.1433C102.442 30.6193 102.782 31.0954 102.85 31.5714C102.85 32.1155 102.238 32.6595 101.83 32.2515C101.694 32.1155 101.626 31.9114 101.626 31.6394C101.014 28.1031 97.6132 25.5869 94.145 24.7708C91.6287 24.2268 87.2764 24.6348 84.9642 24.9068C84.0121 25.0429 83.128 25.1109 82.1759 25.1109C79.7957 25.1789 74.8993 25.6549 73.5392 28.1031C73.2672 28.5792 72.9952 29.1232 72.4511 29.1912C71.7711 29.3272 71.295 28.6472 70.887 28.0351C68.1667 23.9548 62.7943 23.2067 57.9659 24.0228C56.4698 24.4308 55.4497 25.0429 54.4296 25.8589C53.4775 26.675 52.1854 27.3551 51.0293 27.015C50.3492 26.811 49.8052 26.199 49.2611 25.7229C46.6089 23.4787 42.8006 23.0707 39.3323 23.4107C35.388 23.7508 31.5116 24.9068 27.5673 24.4988C26.9553 24.4308 26.4112 24.4308 25.7992 24.5668C22.4669 25.4509 23.0109 27.8311 23.0789 29.9393C23.1469 31.2994 22.4669 34.2916 21.4468 33.4076C20.1547 32.3195 22.0588 30.0073 21.8548 28.3071C21.7188 26.607 20.9707 24.8388 19.6106 23.8188C17.8425 22.4586 15.3943 22.5266 13.1501 22.5947C10.0898 22.6627 6.96156 22.7307 3.96931 21.9826C2.7452 21.5746 1.5211 21.0985 0.296997 20.4865Z"
                  fill="#B4DCFF"
                />
                <path
                  d="M22.8751 8.51734C23.2507 8.51734 23.5552 8.21287 23.5552 7.83728C23.5552 7.4617 23.2507 7.15723 22.8751 7.15723C22.4995 7.15723 22.1951 7.4617 22.1951 7.83728C22.1951 8.21287 22.4995 8.51734 22.8751 8.51734Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M119.307 9.19758C119.683 9.19758 119.987 8.89311 119.987 8.51752C119.987 8.14194 119.683 7.83746 119.307 7.83746C118.932 7.83746 118.627 8.14194 118.627 8.51752C118.627 8.89311 118.932 9.19758 119.307 9.19758Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M24.8464 14.3668C25.0342 14.3668 25.1865 14.2146 25.1865 14.0268C25.1865 13.839 25.0342 13.6868 24.8464 13.6868C24.6586 13.6868 24.5064 13.839 24.5064 14.0268C24.5064 14.2146 24.6586 14.3668 24.8464 14.3668Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M110.755 34.5708C111.815 34.5708 112.675 33.7109 112.675 32.6502C112.675 31.5895 111.815 30.7296 110.755 30.7296C109.694 30.7296 108.834 31.5895 108.834 32.6502C108.834 33.7109 109.694 34.5708 110.755 34.5708Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M17.5702 12.1907C18.3213 12.1907 18.9303 11.5817 18.9303 10.8306C18.9303 10.0794 18.3213 9.47046 17.5702 9.47046C16.819 9.47046 16.2101 10.0794 16.2101 10.8306C16.2101 11.5817 16.819 12.1907 17.5702 12.1907Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M114.75 18.8552C115.501 18.8552 116.11 18.2463 116.11 17.4951C116.11 16.744 115.501 16.135 114.75 16.135C113.999 16.135 113.39 16.744 113.39 17.4951C113.39 18.2463 113.999 18.8552 114.75 18.8552Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M31.3757 34.2901C32.1269 34.2901 32.7359 33.6811 32.7359 32.9299C32.7359 32.1788 32.1269 31.5698 31.3757 31.5698C30.6246 31.5698 30.0156 32.1788 30.0156 32.9299C30.0156 33.6811 30.6246 34.2901 31.3757 34.2901Z"
                  fill="#E3F2FD"
                />
                <path
                  d="M157.105 20C160.143 20 162.605 18.433 162.605 16.5C162.605 14.567 160.143 13 157.105 13C154.067 13 151.605 14.567 151.605 16.5C151.605 18.433 154.067 20 157.105 20Z"
                  fill="#E3F2FD"
                />
              </svg>
            )}
            {activeItem()?.image ? (
              <div>
                {/* <svg class="w-full" viewBox="0 0 300 300" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g filter="url(#filter0_b_1_31903)">
                        <rect width="300" height="300" rx="5" fill="url(#paint0_linear_1_31903)" fill-opacity="0.4"/>
                        <rect x="1" y="1" width="298" height="298" rx="4" stroke="#666E97" stroke-opacity="0.2" stroke-width="2"/>
                        </g>
                        <defs>
                        <filter id="filter0_b_1_31903" x="-10" y="-10" width="320" height="320" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feGaussianBlur in="BackgroundImageFix" stdDeviation="5"/>
                        <feComposite in2="SourceAlpha" operator="in" result="effect1_backgroundBlur_1_31903"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="effect1_backgroundBlur_1_31903" result="shape"/>
                        </filter>
                        <linearGradient id="paint0_linear_1_31903" x1="281.5" y1="-142.5" x2="129.452" y2="392.691" gradientUnits="userSpaceOnUse">
                        <stop offset="0.0625" stop-color="#FFC701"/>
                        <stop offset="0.437985" stop-color="#6C4224"/>
                        <stop offset="0.70786" stop-color="#202337"/>
                        <stop offset="1" stop-color="#202337"/>
                        </linearGradient>
                        </defs>
                    </svg> */}
                <img
                  alt="brown-bg" 
                  src={BrownBg}
                  class="absolute left-0 top-0 xl:w-full xl:h-full"
                />
              </div>
            ) : (
              <img
                alt="gray-bg" 
                src={GrayBg}
                class="absolute left-0 top-0 xl:w-full xl:h-full"
              />
            )}
            <div class="w-full h-full 2xl:w-64 xxl:w-76 absolute left-0 top-0 z-10">
              {activeItem()?.image ? (
                <div
                  class="cursor-pointer w-full h-full center"
                  onClick={() => {
                    setActive({});
                  }}
                >
                  <div class="absolute left-8 top-6 flex flex-col">
                    <p class="text-16 text-white font-semibold font-Oswald capitalize">
                      X{" "}
                      {betValue()
                        ? (
                            (activeItem()?.price || 0) / (betValue() || 1)
                          ).toFixed(2)
                        : 0}
                    </p>
                    <p class="text-14 text-gray-8c text-normal capitalize">
                      {i18n.t("upgrader.Multiplier")}
                    </p>
                  </div>
                  <img
                    alt="item" 
                    class="h-52 xl:h-40 2xl:h-52"
                    src={activeItem()?.image}
                  />
                  <div class="absolute right-8 bottom-6 flex flex-col items-end">
                    <div class="flex items-center gap-2">
                      <Coin />
                      <p class="text-16 text-white font-semibold font-Oswald capitalize">
                        {Number(activeItem()?.price || 0).toLocaleString()}
                      </p>
                    </div>
                    <p class="text-14 text-gray-8c text-normal capitalize">
                      {i18n.t("upgrader.Earnings")}
                    </p>
                  </div>
                </div>
              ) : (
                <div>
                  <div class="absolute left-1/2 transform -translate-x-1/2 bottom-6 flex text-center flex-col items-end">
                    <p class="text-14 text-gray-8c text-normal">
                      Select a skin to upgrade
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        <div class="w-full flex flex-col gap-4">
          <div class="w-full flex justify-between items-center h-10">
            <p class="text-24 text-white font-medium font-Oswald uppercase">
              {i18n.t("upgrader.Select a skin")}
            </p>
            <div class="h-full flex gap-2 relative">
              <div
                class="min-w-40 h-full center gap-2 cursor-pointer"
                onClick={() => changeDescending()}
              >
                <p class="text-14 text-gray-8c font-normal sentence">
                  {i18n.t("upgrader.Price")}{" "}
                  {descending()
                    ? sorting.descending[i18n.language]
                    : sorting.ascending[i18n.language]}
                </p>
                <svg
                  class={`transform ${descending() ? "rotate-180" : ""}`}
                  width="7"
                  height="14"
                  viewBox="0 0 7 14"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M0 5.5L3.4683 0.5L7 5.5H0Z" fill="#FFC701" />
                  <path d="M0 8.5L3.4683 13.5L7 8.5H0Z" fill="#475A76" />
                </svg>
              </div>
              <div class="w-80 h-full bg-dark-1c relative hidden md:flex justify-center items-center">
                <svg
                  class="absolute left-4"
                  width="14"
                  height="14"
                  viewBox="0 0 14 14"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M5.66448 10.5779C6.63277 10.5779 7.53638 10.2975 8.2974 9.81389L11.6119 13.128C11.7721 13.2882 12.0324 13.2931 12.1975 13.1281L12.1976 13.128L13.1299 12.1958C13.2955 12.0302 13.2846 11.7654 13.1294 11.6101L13.1294 11.6101L9.81525 8.2964C10.2986 7.53519 10.5789 6.63189 10.5789 5.66395C10.5789 2.95025 8.3784 0.75 5.66446 0.75C2.95054 0.75 0.75 2.95025 0.75 5.66395C0.75 8.37765 2.95054 10.5779 5.66448 10.5779ZM5.66446 8.9805C3.83244 8.9805 2.34751 7.49569 2.34751 5.66395C2.34751 3.83221 3.83246 2.3474 5.66446 2.3474C7.49646 2.3474 8.98141 3.83221 8.98141 5.66395C8.98141 7.49569 7.49648 8.9805 5.66446 8.9805Z"
                    fill="#475A76"
                    stroke="#475A76"
                    stroke-width="0.5"
                  />
                </svg>
                <input
                  class="w-full h-full pl-10 pr-4 text-14 font-medium uppercase font-Oswald text-white placeholder-gray-47"
                  placeholder={i18n.t("upgrader.Search for item")}
                  onKeyDown={() => clearTimeout(typingTimer)}
                  onKeyUp={(e) => {
                    clearTimeout(typingTimer);
                    typingTimer = setTimeout(
                      () => sendSearchReq(e.target.value),
                      200
                    );
                  }}
                />
              </div>
            </div>
          </div>
          <div
            ref={pageWrapper}
            class={`${isItemsLoaded() ? 'grid' : 'hidden'} w-full grid grid-cols-upgrader-item gap-3`}
          >
            <For
              each={
                search()
                  ? items().filter((item) =>
                      String(item.name)
                        .toLowerCase()
                        .includes(String(search()).toLowerCase())
                    )
                  : items()
              }
            >
              {(item, index) => (
                <CardItem
                  item={item}
                  activeItem={activeItem}
                  setActive={setActive}
                  isLazyImageShown={index() >= 45}
                />
              )}
            </For>
          </div>
          <PageLoader isShown={!isItemsLoaded()} />
        </div>
      </div>
    </Fallback>
  );
};

export default OldUpgrader;
